// Generated by CoffeeScript 1.6.1
(function() {

  describe('Rubric', function() {
    beforeEach(function() {
      spyOn(Logger, 'log');
      loadFixtures('rubric.html');
      jasmine.Clock.useMock();
      this.element = $('.combined-open-ended');
      return this.location = this.element.data('location');
    });
    describe('constructor', function() {
      beforeEach(function() {
        return this.rub = new Rubric(this.element);
      });
      return it('rubric should properly grab the element', function() {
        return expect(this.rub.el).toEqual(this.element);
      });
    });
    return describe('initialize', function() {
      beforeEach(function() {
        this.rub = new Rubric(this.element);
        return this.rub.initialize(this.location);
      });
      it('rubric correctly sets location', function() {
        return expect($(this.rub.rubric_sel).data('location')).toEqual(this.location);
      });
      return it('rubric correctly read', function() {
        return expect(this.rub.categories.length).toEqual(5);
      });
    });
  });

  describe('CombinedOpenEnded', function() {
    beforeEach(function() {
      spyOn(Logger, 'log');
      loadFixtures('combined-open-ended.html');
      jasmine.Clock.useMock();
      return this.element = $('.course-content');
    });
    describe('constructor', function() {
      beforeEach(function() {
        spyOn(Collapsible, 'setCollapsibles');
        return this.combined = new CombinedOpenEnded(this.element);
      });
      it('set the element', function() {
        return expect(this.combined.el).toEqual(this.element);
      });
      it('get the correct values from data fields', function() {
        expect(this.combined.ajax_url).toEqual('/courses/MITx/6.002x/2012_Fall/modx/i4x://MITx/6.002x/combinedopenended/CombinedOE');
        expect(this.combined.state).toEqual('assessing');
        expect(this.combined.task_count).toEqual(2);
        return expect(this.combined.task_number).toEqual(1);
      });
      return it('subelements are made collapsible', function() {
        return expect(Collapsible.setCollapsibles).toHaveBeenCalled();
      });
    });
    describe('poll', function() {
      var oldSetTimeout,
        _this = this;
      oldSetTimeout = null;
      beforeEach(function() {
        _this.combined = new CombinedOpenEnded(_this.element);
        spyOn(_this.combined, 'reload').andCallFake(function() {
          return 0;
        });
        oldSetTimeout = window.setTimeout;
        return window.setTimeout = jasmine.createSpy().andCallFake(function(callback, timeout) {
          return 5;
        });
      });
      afterEach(function() {
        return window.setTimeout = oldSetTimeout;
      });
      it('polls at the correct intervals', function() {
        var fakeResponseContinue;
        fakeResponseContinue = {
          state: 'not done'
        };
        spyOn($, 'postWithPrefix').andCallFake(function(url, callback) {
          return callback(fakeResponseContinue);
        });
        _this.combined.poll();
        expect(window.setTimeout).toHaveBeenCalledWith(_this.combined.poll, 10000);
        return expect(window.queuePollerID).toBe(5);
      });
      return xit('polling stops properly', function() {
        var fakeResponseDone;
        fakeResponseDone = {
          state: "done"
        };
        spyOn($, 'postWithPrefix').andCallFake(function(url, callback) {
          return callback(fakeResponseDone);
        });
        _this.combined.poll();
        expect(window.queuePollerID).toBeUndefined();
        return expect(window.setTimeout).not.toHaveBeenCalled();
      });
    });
    describe('rebind', function() {
      var oldSetTimeout,
        _this = this;
      oldSetTimeout = null;
      beforeEach(function() {
        this.combined = new CombinedOpenEnded(this.element);
        spyOn(this.combined, 'queueing').andCallFake(function() {
          return 0;
        });
        spyOn(this.combined, 'skip_post_assessment').andCallFake(function() {
          return 0;
        });
        oldSetTimeout = window.setTimeout;
        return window.setTimeout = jasmine.createSpy().andCallFake(function(callback, timeout) {
          return 5;
        });
      });
      afterEach(function() {
        return window.setTimeout = oldSetTimeout;
      });
      it('when our child is in an assessing state', function() {
        this.combined.child_state = 'assessing';
        this.combined.rebind();
        expect(this.combined.answer_area.attr("disabled")).toBe("disabled");
        expect(this.combined.submit_button.val()).toBe("Submit assessment");
        return expect(this.combined.queueing).toHaveBeenCalled();
      });
      it('when our child state is initial', function() {
        this.combined.child_state = 'initial';
        this.combined.rebind();
        expect(this.combined.answer_area.attr("disabled")).toBeUndefined();
        return expect(this.combined.submit_button.val()).toBe("Submit");
      });
      it('when our child state is post_assessment', function() {
        this.combined.child_state = 'post_assessment';
        this.combined.rebind();
        expect(this.combined.answer_area.attr("disabled")).toBe("disabled");
        return expect(this.combined.submit_button.val()).toBe("Submit post-assessment");
      });
      return it('when our child state is done', function() {
        spyOn(this.combined, 'next_problem').andCallFake(function() {});
        this.combined.child_state = 'done';
        this.combined.rebind();
        expect(this.combined.answer_area.attr("disabled")).toBe("disabled");
        return expect(this.combined.next_problem_button).toBe(":visible");
      });
    });
    return describe('next_problem', function() {
      beforeEach(function() {
        this.combined = new CombinedOpenEnded(this.element);
        return this.combined.child_state = 'done';
      });
      it('handling a successful call', function() {
        var fakeResponse;
        fakeResponse = {
          success: true,
          html: "dummy html",
          allow_reset: false
        };
        spyOn($, 'postWithPrefix').andCallFake(function(url, val, callback) {
          return callback(fakeResponse);
        });
        spyOn(this.combined, 'reinitialize');
        spyOn(this.combined, 'rebind');
        this.combined.next_problem();
        expect($.postWithPrefix).toHaveBeenCalled();
        expect(this.combined.reinitialize).toHaveBeenCalledWith(this.combined.element);
        expect(this.combined.rebind).toHaveBeenCalled();
        expect(this.combined.answer_area.val()).toBe('');
        return expect(this.combined.child_state).toBe('initial');
      });
      return it('handling an unsuccessful call', function() {
        var fakeResponse;
        fakeResponse = {
          success: false,
          error: 'This is an error'
        };
        spyOn($, 'postWithPrefix').andCallFake(function(url, val, callback) {
          return callback(fakeResponse);
        });
        this.combined.next_problem();
        return expect(this.combined.errors_area.html()).toBe(fakeResponse.error);
      });
    });
  });

}).call(this);
