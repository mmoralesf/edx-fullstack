// Generated by CoffeeScript 1.6.1
(function() {

  describe('OpenEndedMarkdownEditingDescriptor', function() {
    describe('save stores the correct data', function() {
      it('saves markdown from markdown editor', function() {
        var saveResult;
        loadFixtures('combinedopenended-with-markdown.html');
        this.descriptor = new OpenEndedMarkdownEditingDescriptor($('.combinedopenended-editor'));
        saveResult = this.descriptor.save();
        expect(saveResult.metadata.markdown).toEqual('markdown');
        return expect(saveResult.data).toEqual('<combinedopenended>\nmarkdown\n</combinedopenended>');
      });
      it('clears markdown when xml editor is selected', function() {
        var saveResult;
        loadFixtures('combinedopenended-with-markdown.html');
        this.descriptor = new OpenEndedMarkdownEditingDescriptor($('.combinedopenended-editor'));
        this.descriptor.createXMLEditor('replace with markdown');
        saveResult = this.descriptor.save();
        expect(saveResult.nullout).toEqual(['markdown']);
        return expect(saveResult.data).toEqual('replace with markdown');
      });
      return it('saves xml from the xml editor', function() {
        var saveResult;
        loadFixtures('combinedopenended-without-markdown.html');
        this.descriptor = new OpenEndedMarkdownEditingDescriptor($('.combinedopenended-editor'));
        saveResult = this.descriptor.save();
        expect(saveResult.nullout).toEqual(['markdown']);
        return expect(saveResult.data).toEqual('xml only');
      });
    });
    describe('advanced editor opens correctly', function() {
      return it('click on advanced editor should work', function() {
        var e;
        loadFixtures('combinedopenended-with-markdown.html');
        this.descriptor = new OpenEndedMarkdownEditingDescriptor($('.combinedopenended-editor'));
        spyOn(this.descriptor, 'confirmConversionToXml').andReturn(true);
        expect(this.descriptor.confirmConversionToXml).not.toHaveBeenCalled();
        e = jasmine.createSpyObj('e', ['preventDefault']);
        this.descriptor.onShowXMLButton(e);
        expect(e.preventDefault).toHaveBeenCalled();
        expect(this.descriptor.confirmConversionToXml).toHaveBeenCalled();
        return expect($('.editor-bar').length).toEqual(0);
      });
    });
    describe('insertPrompt', function() {
      it('inserts the template if selection is empty', function() {
        var revisedSelection;
        revisedSelection = OpenEndedMarkdownEditingDescriptor.insertPrompt('');
        return expect(revisedSelection).toEqual(OpenEndedMarkdownEditingDescriptor.promptTemplate);
      });
      return it('recognizes html in the prompt', function() {
        var revisedSelection;
        revisedSelection = OpenEndedMarkdownEditingDescriptor.insertPrompt('[prompt]<h1>Hello</h1>[prompt]');
        return expect(revisedSelection).toEqual('[prompt]<h1>Hello</h1>[prompt]');
      });
    });
    describe('insertRubric', function() {
      it('inserts the template if selection is empty', function() {
        var revisedSelection;
        revisedSelection = OpenEndedMarkdownEditingDescriptor.insertRubric('');
        return expect(revisedSelection).toEqual(OpenEndedMarkdownEditingDescriptor.rubricTemplate);
      });
      return it('recognizes a proper rubric', function() {
        var revisedSelection;
        revisedSelection = OpenEndedMarkdownEditingDescriptor.insertRubric('[rubric]\n+1\n-1\n-2\n[rubric]');
        return expect(revisedSelection).toEqual('[rubric]\n+1\n-1\n-2\n[rubric]');
      });
    });
    describe('insertTasks', function() {
      it('inserts the template if selection is empty', function() {
        var revisedSelection;
        revisedSelection = OpenEndedMarkdownEditingDescriptor.insertTasks('');
        return expect(revisedSelection).toEqual(OpenEndedMarkdownEditingDescriptor.tasksTemplate);
      });
      return it('recognizes a proper task string', function() {
        var revisedSelection;
        revisedSelection = OpenEndedMarkdownEditingDescriptor.insertTasks('[tasks](Self)[tasks]');
        return expect(revisedSelection).toEqual('[tasks](Self)[tasks]');
      });
    });
    return describe('markdownToXml', function() {
      it('converts prompt to xml', function() {
        var data;
        data = OpenEndedMarkdownEditingDescriptor.markdownToXml("[prompt]\n<h1>Prompt!</h1>\nThis is my super awesome prompt.\n[prompt]");
        data = data.replace(/[\t\n\s]/gmi, '');
        return expect(data).toEqual("<combinedopenended>\n   <prompt>\n   <h1>Prompt!</h1>\n   This is my super awesome prompt.\n   </prompt>\n</combinedopenended>".replace(/[\t\n\s]/gmi, ''));
      });
      it('converts rubric to xml', function() {
        var data;
        data = OpenEndedMarkdownEditingDescriptor.markdownToXml("[rubric]\n+ 1\n-1\n-2\n+ 2\n-1\n-2\n+3\n-1\n-2\n-3\n[rubric]");
        data = data.replace(/[\t\n\s]/gmi, '');
        return expect(data).toEqual("<combinedopenended>\n<rubric>\n  <rubric>\n  <category>\n  <description>1</description>\n  <option>1</option>\n  <option>2</option>\n  </category>\n  <category>\n  <description>2</description>\n  <option>1</option>\n  <option>2</option>\n  </category>\n  <category>\n  <description>3</description>\n  <option>1</option>\n  <option>2</option>\n  <option>3</option>\n  </category>\n  </rubric>\n</rubric>\n</combinedopenended>".replace(/[\t\n\s]/gmi, ''));
      });
      return it('converts tasks to xml', function() {
        var data, equality_list;
        data = OpenEndedMarkdownEditingDescriptor.markdownToXml("[tasks]\n(Self), ({1-2}AI), ({1-4}AI), ({1-2}Peer\n[tasks]");
        data = data.replace(/[\t\n\s]/gmi, '');
        equality_list = "<combinedopenended>\n  <task>\n  <selfassessment/>\n  </task>\n  <task>\n    <openended min_score_to_attempt=\"1\" max_score_to_attempt=\"2\">ml_grading.conf</openended>\n  </task>\n  <task>\n    <openended min_score_to_attempt=\"1\" max_score_to_attempt=\"4\">ml_grading.conf</openended>\n  </task>\n  <task>\n    <openended min_score_to_attempt=\"1\" max_score_to_attempt=\"2\">peer_grading.conf</openended>\n  </task>\n</combinedopenended>";
        return expect(data).toEqual(equality_list.replace(/[\t\n\s]/gmi, ''));
      });
    });
  });

}).call(this);
