// Generated by CoffeeScript 1.6.1
(function() {
  var _this = this;

  this.PeerGradingProblemBackend = (function() {

    function PeerGradingProblemBackend(ajax_url, mock_backend) {
      this.mock_backend = mock_backend;
      this.ajax_url = ajax_url;
      this.mock_cnt = 0;
    }

    PeerGradingProblemBackend.prototype.post = function(cmd, data, callback) {
      var _this = this;
      if (this.mock_backend) {
        return callback(this.mock(cmd, data));
      } else {
        return $.post(this.ajax_url + cmd, data, callback).error(function() {
          return callback({
            success: false,
            error: "Error occurred while performing this operation"
          });
        });
      }
    };

    PeerGradingProblemBackend.prototype.mock = function(cmd, data) {
      var response;
      if (cmd === 'is_student_calibrated') {
        response = {
          success: true,
          calibrated: this.mock_cnt >= 2
        };
      } else if (cmd === 'show_calibration_essay') {
        this.mock_cnt++;
        response = {
          success: true,
          submission_id: 1,
          submission_key: 'abcd',
          student_response: 'Contrary to popular belief, Lorem Ipsum is not simply random text. It has roots in a piece of classical Latin literature from 45 BC, making it over 2000 years old. Richard McClintock, a Latin professor at Hampden-Sydney College in Virginia, looked up one of the more obscure Latin words, consectetur, from a Lorem Ipsum passage, and going through the cites of the word in classical literature, discovered the undoubtable source. Lorem Ipsum comes from sections 1.10.32 and 1.10.33 of "de Finibus Bonorum et Malorum" (The Extremes of Good and Evil) by Cicero, written in 45 BC. This book is a treatise on the theory of ethics, very popular during the Renaissance. The first line of Lorem Ipsum, "Lorem ipsum dolor sit amet..", comes from a line in section 1.10.32.\n\nThe standard chunk of Lorem Ipsum used since the 1500s is reproduced below for those interested. Sections 1.10.32 and 1.10.33 from "de Finibus Bonorum et Malorum" by Cicero are also reproduced in their exact original form, accompanied by English versions from the 1914 translation by H. Rackham.',
          prompt: '<h2>S11E3: Metal Bands</h2>\n<p>Shown below are schematic band diagrams for two different metals. Both diagrams appear different, yet both of the elements are undisputably metallic in nature.</p>\n<p>* Why is it that both sodium and magnesium behave as metals, even though the s-band of magnesium is filled? </p>\n<p>This is a self-assessed open response question. Please use as much space as you need in the box below to answer the question.</p>',
          rubric: '<table class="rubric"><tbody><tr><th>Purpose</th>\n\n<td>\n<input type="radio" class="score-selection" name="score-selection-0" id="score-0-0" value="0"><label for="score-0-0">No product</label>\n</td>\n\n<td>\n<input type="radio" class="score-selection" name="score-selection-0" id="score-0-1" value="1"><label for="score-0-1">Unclear purpose or main idea</label>\n</td>\n\n<td>\n<input type="radio" class="score-selection" name="score-selection-0" id="score-0-2" value="2"><label for="score-0-2">Communicates an identifiable purpose and/or main idea for an audience</label>\n</td>\n\n<td>\n<input type="radio" class="score-selection" name="score-selection-0" id="score-0-3" value="3"><label for="score-0-3">Achieves a clear and distinct purpose for a targeted audience and communicates main ideas with effectively used techniques to introduce and represent ideas and insights</label>\n</td>\n</tr><tr><th>Organization</th>\n\n<td>\n<input type="radio" class="score-selection" name="score-selection-1" id="score-1-0" value="0"><label for="score-1-0">No product</label>\n</td>\n\n<td>\n<input type="radio" class="score-selection" name="score-selection-1" id="score-1-1" value="1"><label for="score-1-1">Organization is unclear; introduction, body, and/or conclusion are underdeveloped, missing or confusing.</label>\n</td>\n\n<td>\n<input type="radio" class="score-selection" name="score-selection-1" id="score-1-2" value="2"><label for="score-1-2">Organization is occasionally unclear; introduction, body or conclusion may be underdeveloped.</label>\n</td>\n\n<td>\n<input type="radio" class="score-selection" name="score-selection-1" id="score-1-3" value="3"><label for="score-1-3">Organization is clear and easy to follow; introduction, body and conclusion are defined and aligned with purpose.</label>\n</td>\n</tr></tbody></table>',
          max_score: 4
        };
      } else if (cmd === 'get_next_submission') {
        response = {
          success: true,
          submission_id: 1,
          submission_key: 'abcd',
          student_response: 'Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed nec tristique ante. Proin at mauris sapien, quis varius leo. Morbi laoreet leo nisi. Morbi aliquam lacus ante. Cras iaculis velit sed diam mattis a fermentum urna luctus. Duis consectetur nunc vitae felis facilisis eget vulputate risus viverra. Cras consectetur ullamcorper lobortis. Nam eu gravida lorem. Nulla facilisi. Nullam quis felis enim. Mauris orci lectus, dictum id cursus in, vulputate in massa.\n\nPhasellus non varius sem. Nullam commodo lacinia odio sit amet egestas. Donec ullamcorper sapien sagittis arcu volutpat placerat. Phasellus ut pretium ante. Nam dictum pulvinar nibh dapibus tristique. Sed at tellus mi, fringilla convallis justo. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Phasellus tristique rutrum nulla sed eleifend. Praesent at nunc arcu. Mauris condimentum faucibus nibh, eget commodo quam viverra sed. Morbi in tincidunt dolor. Morbi sed augue et augue interdum fermentum.\n\nCurabitur tristique purus ac arcu consequat cursus. Cras diam felis, dignissim quis placerat at, aliquet ac metus. Mauris vulputate est eu nibh imperdiet varius. Cras aliquet rhoncus elit a laoreet. Mauris consectetur erat et erat scelerisque eu faucibus dolor consequat. Nam adipiscing sagittis nisl, eu mollis massa tempor ac. Nulla scelerisque tempus blandit. Phasellus ac ipsum eros, id posuere arcu. Nullam non sapien arcu. Vivamus sit amet lorem justo, ac tempus turpis. Suspendisse pharetra gravida imperdiet. Pellentesque lacinia mi eu elit luctus pellentesque. Sed accumsan libero a magna elementum varius. Nunc eget pellentesque metus. ',
          prompt: '<h2>S11E3: Metal Bands</h2>\n<p>Shown below are schematic band diagrams for two different metals. Both diagrams appear different, yet both of the elements are undisputably metallic in nature.</p>\n<p>* Why is it that both sodium and magnesium behave as metals, even though the s-band of magnesium is filled? </p>\n<p>This is a self-assessed open response question. Please use as much space as you need in the box below to answer the question.</p>',
          rubric: '<table class="rubric"><tbody><tr><th>Purpose</th>\n\n<td>\n<input type="radio" class="score-selection" name="score-selection-0" id="score-0-0" value="0"><label for="score-0-0">No product</label>\n</td>\n\n<td>\n<input type="radio" class="score-selection" name="score-selection-0" id="score-0-1" value="1"><label for="score-0-1">Unclear purpose or main idea</label>\n</td>\n\n<td>\n<input type="radio" class="score-selection" name="score-selection-0" id="score-0-2" value="2"><label for="score-0-2">Communicates an identifiable purpose and/or main idea for an audience</label>\n</td>\n\n<td>\n<input type="radio" class="score-selection" name="score-selection-0" id="score-0-3" value="3"><label for="score-0-3">Achieves a clear and distinct purpose for a targeted audience and communicates main ideas with effectively used techniques to introduce and represent ideas and insights</label>\n</td>\n</tr><tr><th>Organization</th>\n\n<td>\n<input type="radio" class="score-selection" name="score-selection-1" id="score-1-0" value="0"><label for="score-1-0">No product</label>\n</td>\n\n<td>\n<input type="radio" class="score-selection" name="score-selection-1" id="score-1-1" value="1"><label for="score-1-1">Organization is unclear; introduction, body, and/or conclusion are underdeveloped, missing or confusing.</label>\n</td>\n\n<td>\n<input type="radio" class="score-selection" name="score-selection-1" id="score-1-2" value="2"><label for="score-1-2">Organization is occasionally unclear; introduction, body or conclusion may be underdeveloped.</label>\n</td>\n\n<td>\n<input type="radio" class="score-selection" name="score-selection-1" id="score-1-3" value="3"><label for="score-1-3">Organization is clear and easy to follow; introduction, body and conclusion are defined and aligned with purpose.</label>\n</td>\n</tr></tbody></table>',
          max_score: 4
        };
      } else if (cmd === 'save_calibration_essay') {
        response = {
          success: true,
          actual_score: 2
        };
      } else if (cmd === 'save_grade') {
        response = {
          success: true
        };
      }
      return response;
    };

    return PeerGradingProblemBackend;

  })();

  this.PeerGradingProblem = (function() {

    PeerGradingProblem.prototype.prompt_wrapper_sel = '.prompt-wrapper';

    PeerGradingProblem.prototype.peer_grading_container_sel = '.peer-grading-container';

    PeerGradingProblem.prototype.submission_container_sel = '.submission-container';

    PeerGradingProblem.prototype.prompt_container_sel = '.prompt-container';

    PeerGradingProblem.prototype.rubric_container_sel = '.rubric-container';

    PeerGradingProblem.prototype.flag_student_container_sel = '.flag-student-container';

    PeerGradingProblem.prototype.calibration_panel_sel = '.calibration-panel';

    PeerGradingProblem.prototype.grading_panel_sel = '.grading-panel';

    PeerGradingProblem.prototype.content_panel_sel = '.content-panel';

    PeerGradingProblem.prototype.grading_message_sel = '.grading-message';

    PeerGradingProblem.prototype.question_header_sel = '.question-header';

    PeerGradingProblem.prototype.flag_submission_confirmation_sel = '.flag-submission-confirmation';

    PeerGradingProblem.prototype.flag_submission_confirmation_button_sel = '.flag-submission-confirmation-button';

    PeerGradingProblem.prototype.flag_submission_removal_button_sel = '.flag-submission-removal-button';

    PeerGradingProblem.prototype.grading_wrapper_sel = '.grading-wrapper';

    PeerGradingProblem.prototype.calibration_feedback_sel = '.calibration-feedback';

    PeerGradingProblem.prototype.interstitial_page_sel = '.interstitial-page';

    PeerGradingProblem.prototype.calibration_interstitial_page_sel = '.calibration-interstitial-page';

    PeerGradingProblem.prototype.error_container_sel = '.error-container';

    PeerGradingProblem.prototype.peer_grading_instructions_sel = '.peer-grading-instructions';

    PeerGradingProblem.prototype.feedback_area_sel = '.feedback-area';

    PeerGradingProblem.prototype.ice_legend_sel = '.ice-legend';

    PeerGradingProblem.prototype.score_selection_container_sel = '.score-selection-container';

    PeerGradingProblem.prototype.rubric_selection_container_sel = '.rubric-selection-container';

    PeerGradingProblem.prototype.submit_button_sel = '.submit-button';

    PeerGradingProblem.prototype.action_button_sel = '.action-button';

    PeerGradingProblem.prototype.calibration_feedback_button_sel = '.calibration-feedback-button';

    PeerGradingProblem.prototype.interstitial_page_button_sel = '.interstitial-page-button';

    PeerGradingProblem.prototype.calibration_interstitial_page_button_sel = '.calibration-interstitial-page-button';

    PeerGradingProblem.prototype.flag_checkbox_sel = '.flag-checkbox';

    PeerGradingProblem.prototype.calibration_text_sel = '.calibration-text';

    PeerGradingProblem.prototype.grading_text_sel = '.grading-text';

    PeerGradingProblem.prototype.calibration_feedback_wrapper_sel = '.calibration-feedback-wrapper';

    function PeerGradingProblem(backend, el) {
      var _this = this;
      this.scroll_to_top = function() {
        return PeerGradingProblem.prototype.scroll_to_top.apply(_this, arguments);
      };
      this.collapse_question = function(event) {
        return PeerGradingProblem.prototype.collapse_question.apply(_this, arguments);
      };
      this.gentle_alert = function(msg) {
        return PeerGradingProblem.prototype.gentle_alert.apply(_this, arguments);
      };
      this.setup_score_selection = function(max_score) {
        return PeerGradingProblem.prototype.setup_score_selection.apply(_this, arguments);
      };
      this.show_submit_button = function() {
        return PeerGradingProblem.prototype.show_submit_button.apply(_this, arguments);
      };
      this.render_error = function(error_message) {
        return PeerGradingProblem.prototype.render_error.apply(_this, arguments);
      };
      this.render_calibration_interstitial_page = function() {
        return PeerGradingProblem.prototype.render_calibration_interstitial_page.apply(_this, arguments);
      };
      this.render_interstitial_page = function() {
        return PeerGradingProblem.prototype.render_interstitial_page.apply(_this, arguments);
      };
      this.render_calibration_feedback = function(response) {
        return PeerGradingProblem.prototype.render_calibration_feedback.apply(_this, arguments);
      };
      this.render_submission_data = function(response) {
        return PeerGradingProblem.prototype.render_submission_data.apply(_this, arguments);
      };
      this.render_submission = function(response) {
        return PeerGradingProblem.prototype.render_submission.apply(_this, arguments);
      };
      this.tracking_changes = function() {
        return PeerGradingProblem.prototype.tracking_changes.apply(_this, arguments);
      };
      this.render_calibration = function(response) {
        return PeerGradingProblem.prototype.render_calibration.apply(_this, arguments);
      };
      this.keyup_handler = function(event) {
        return PeerGradingProblem.prototype.keyup_handler.apply(_this, arguments);
      };
      this.keydown_handler = function(event) {
        return PeerGradingProblem.prototype.keydown_handler.apply(_this, arguments);
      };
      this.graded_callback = function(event) {
        return PeerGradingProblem.prototype.graded_callback.apply(_this, arguments);
      };
      this.submission_callback = function(response) {
        return PeerGradingProblem.prototype.submission_callback.apply(_this, arguments);
      };
      this.calibration_callback = function(response) {
        return PeerGradingProblem.prototype.calibration_callback.apply(_this, arguments);
      };
      this.calibration_check_callback = function(response) {
        return PeerGradingProblem.prototype.calibration_check_callback.apply(_this, arguments);
      };
      this.flag_box_checked = function() {
        return PeerGradingProblem.prototype.flag_box_checked.apply(_this, arguments);
      };
      this.close_dialog_box = function() {
        return PeerGradingProblem.prototype.close_dialog_box.apply(_this, arguments);
      };
      this.remove_flag = function() {
        return PeerGradingProblem.prototype.remove_flag.apply(_this, arguments);
      };
      this.submit_grade = function() {
        return PeerGradingProblem.prototype.submit_grade.apply(_this, arguments);
      };
      this.submit_calibration_essay = function() {
        return PeerGradingProblem.prototype.submit_calibration_essay.apply(_this, arguments);
      };
      this.fetch_submission_essay = function() {
        return PeerGradingProblem.prototype.fetch_submission_essay.apply(_this, arguments);
      };
      this.fetch_calibration_essay = function() {
        return PeerGradingProblem.prototype.fetch_calibration_essay.apply(_this, arguments);
      };
      this.is_calibrated_check = function() {
        return PeerGradingProblem.prototype.is_calibrated_check.apply(_this, arguments);
      };
      this.el = el;
      this.prompt_wrapper = $(this.prompt_wrapper_sel);
      this.backend = backend;
      this.is_ctrl = false;
      this.el = $(this.peer_grading_container_sel);
      this.location = $('.peer-grading').data('location');
      if (!this.location) {
        return;
      }
      this.submission_container = this.$(this.submission_container_sel);
      this.prompt_container = this.$(this.prompt_container_sel);
      this.rubric_container = this.$(this.rubric_container_sel);
      this.flag_student_container = this.$(this.flag_student_container_sel);
      this.calibration_panel = this.$(this.calibration_panel_sel);
      this.grading_panel = this.$(this.grading_panel_sel);
      this.content_panel = this.$(this.content_panel_sel);
      this.grading_message = this.$(this.grading_message_sel);
      this.grading_message.hide();
      this.question_header = this.$(this.question_header_sel);
      this.question_header.click(this.collapse_question);
      this.flag_submission_confirmation = this.$(this.flag_submission_confirmation_sel);
      this.flag_submission_confirmation_button = this.$(this.flag_submission_confirmation_button_sel);
      this.flag_submission_removal_button = this.$(this.flag_submission_removal_button_sel);
      this.flag_submission_confirmation_button.click(this.close_dialog_box);
      this.flag_submission_removal_button.click(this.remove_flag);
      this.grading_wrapper = this.$(this.grading_wrapper_sel);
      this.calibration_feedback_panel = this.$(this.calibration_feedback_sel);
      this.interstitial_page = this.$(this.interstitial_page_sel);
      this.interstitial_page.hide();
      this.calibration_interstitial_page = this.$(this.calibration_interstitial_page_sel);
      this.calibration_interstitial_page.hide();
      this.error_container = this.$(this.error_container_sel);
      this.submission_key_input = $("input[name='submission-key']");
      this.essay_id_input = this.$("input[name='essay-id']");
      this.peer_grading_instructions = this.$(this.peer_grading_instructions_sel);
      this.feedback_area = this.$(this.feedback_area_sel);
      this.ice_legend = this.$(this.ice_legend_sel);
      this.score_selection_container = this.$(this.score_selection_container_sel);
      this.rubric_selection_container = this.$(this.rubric_selection_container_sel);
      this.grade = null;
      this.calibration = null;
      this.submit_button = this.$(this.submit_button_sel);
      this.action_button = this.$(this.action_button_sel);
      this.calibration_feedback_button = this.$(this.calibration_feedback_button_sel);
      this.interstitial_page_button = this.$(this.interstitial_page_button_sel);
      this.calibration_interstitial_page_button = this.$(this.calibration_interstitial_page_button_sel);
      this.flag_student_checkbox = this.$(this.flag_checkbox_sel);
      $(window).keydown(this.keydown_handler);
      $(window).keyup(this.keyup_handler);
      Collapsible.setCollapsibles(this.content_panel);
      this.action_button.click(function() {
        return history.back();
      });
      this.calibration_feedback_button.click(function() {
        _this.calibration_feedback_panel.hide();
        _this.grading_wrapper.show();
        _this.gentle_alert("Calibration essay saved.  Fetching the next essay.");
        return _this.is_calibrated_check();
      });
      this.interstitial_page_button.click(function() {
        _this.interstitial_page.hide();
        return _this.is_calibrated_check();
      });
      this.calibration_interstitial_page_button.click(function() {
        _this.calibration_interstitial_page.hide();
        return _this.is_calibrated_check();
      });
      this.flag_student_checkbox.click(function() {
        return _this.flag_box_checked();
      });
      this.calibration_feedback_button.hide();
      this.calibration_feedback_panel.hide();
      this.error_container.hide();
      this.flag_submission_confirmation.hide();
      if (this.tracking_changes()) {
        this.change_tracker = new TrackChanges(this.el);
      }
      this.is_calibrated_check();
    }

    PeerGradingProblem.prototype.$ = function(selector) {
      return $(selector, this.el);
    };

    PeerGradingProblem.prototype.is_calibrated_check = function() {
      return this.backend.post('is_student_calibrated', {
        location: this.location
      }, this.calibration_check_callback);
    };

    PeerGradingProblem.prototype.fetch_calibration_essay = function() {
      return this.backend.post('show_calibration_essay', {
        location: this.location
      }, this.render_calibration);
    };

    PeerGradingProblem.prototype.fetch_submission_essay = function() {
      return this.backend.post('get_next_submission', {
        location: this.location
      }, this.render_submission);
    };

    PeerGradingProblem.prototype.construct_data = function() {
      var data, feedback_content;
      if (this.tracking_changes()) {
        feedback_content = this.feedback_area.html();
      } else {
        feedback_content = this.feedback_area.val();
      }
      data = {
        rubric_scores: this.rub.get_score_list(),
        score: this.rub.get_total_score(),
        location: this.location,
        submission_id: this.essay_id_input.val(),
        submission_key: this.submission_key_input.val(),
        feedback: feedback_content,
        submission_flagged: this.flag_student_checkbox.is(':checked'),
        answer_unknown: false
      };
      return data;
    };

    PeerGradingProblem.prototype.submit_calibration_essay = function() {
      var data;
      data = this.construct_data();
      this.submit_button.hide();
      return this.backend.post('save_calibration_essay', data, this.calibration_callback);
    };

    PeerGradingProblem.prototype.submit_grade = function() {
      var data;
      data = this.construct_data();
      this.submit_button.hide();
      return this.backend.post('save_grade', data, this.submission_callback);
    };

    PeerGradingProblem.prototype.remove_flag = function() {
      this.flag_student_checkbox.removeAttr("checked");
      this.close_dialog_box();
      return this.submit_button.attr('disabled', true);
    };

    PeerGradingProblem.prototype.close_dialog_box = function() {
      return $(this.flag_submission_confirmation_sel).dialog('close');
    };

    PeerGradingProblem.prototype.flag_box_checked = function() {
      if (this.flag_student_checkbox.is(':checked')) {
        this.$(this.flag_submission_confirmation_sel).dialog({
          height: 400,
          width: 400
        });
        return this.submit_button.attr('disabled', false);
      }
    };

    PeerGradingProblem.prototype.calibration_check_callback = function(response) {
      if (response.success) {
        if (response.calibrated && (this.calibration === null || this.calibration === false)) {
          this.calibration = false;
          return this.fetch_submission_essay();
        } else if (response.calibrated && this.calibration === true) {
          this.calibration = false;
          return this.render_interstitial_page();
        } else if (!response.calibrated && this.calibration === null) {
          this.calibration = true;
          return this.render_calibration_interstitial_page();
        } else {
          this.calibration = true;
          return this.fetch_calibration_essay();
        }
      } else if (response.error) {
        return this.render_error(response.error);
      } else {
        return this.render_error("Error contacting the grading service");
      }
    };

    PeerGradingProblem.prototype.calibration_callback = function(response) {
      if (response.success) {
        return this.render_calibration_feedback(response);
      } else if (response.error) {
        return this.render_error(response.error);
      } else {
        return this.render_error("Error saving calibration score");
      }
    };

    PeerGradingProblem.prototype.submission_callback = function(response) {
      var message;
      if (response.success) {
        this.is_calibrated_check();
        this.grading_message.fadeIn();
        message = "<p>Successfully saved your feedback. Fetching the next essay.";
        if (response.required_done) {
          message = message + " You have done the required number of peer assessments but may continue grading if you like.";
        }
        message = message + "</p>";
        return this.grading_message.html(message);
      } else {
        if (response.error) {
          return this.render_error(response.error);
        } else {
          return this.render_error("Error occurred while submitting grade");
        }
      }
    };

    PeerGradingProblem.prototype.graded_callback = function(event) {
      var ev, ul;
      ev = this.$(event.target).parent().parent();
      ul = ev.parent().parent();
      ul.find(".rubric-label-selected").removeClass('rubric-label-selected');
      ev.addClass('rubric-label-selected');
      if (this.rub.check_complete()) {
        this.grading_message.hide();
        this.show_submit_button();
        return this.grade = this.rub.get_total_score();
      }
    };

    PeerGradingProblem.prototype.keydown_handler = function(event) {
      if (event.which === 17 && this.is_ctrl === false) {
        return this.is_ctrl = true;
      } else if (event.which === 13 && this.submit_button.is(':visible') && this.is_ctrl === true) {
        if (this.calibration) {
          return this.submit_calibration_essay();
        } else {
          return this.submit_grade();
        }
      }
    };

    PeerGradingProblem.prototype.keyup_handler = function(event) {
      if (event.which === 17 && this.is_ctrl === true) {
        return this.is_ctrl = false;
      }
    };

    PeerGradingProblem.prototype.render_calibration = function(response) {
      var feedback_text;
      if (response.success) {
        this.submission_container.html("");
        this.render_submission_data(response);
        this.calibration_panel.addClass('current-state');
        this.grading_panel.removeClass('current-state');
        this.calibration_panel.find(this.calibration_text_sel).show();
        this.grading_panel.find(this.calibration_text_sel).show();
        this.calibration_panel.find(this.grading_text_sel).hide();
        this.grading_panel.find(this.grading_text_sel).hide();
        this.flag_student_container.hide();
        this.peer_grading_instructions.hide();
        this.feedback_area.attr('disabled', true);
        feedback_text = "Once you are done learning to grade, and are grading your peers' work, you will be asked to share written feedback with them in addition to scoring them.";
        if (this.tracking_changes()) {
          this.ice_legend.hide();
          this.feedback_area.attr('contenteditable', false);
          this.feedback_area.text(feedback_text);
        } else {
          this.feedback_area.val(feedback_text);
        }
        this.submit_button.show();
        this.submit_button.unbind('click');
        this.submit_button.click(this.submit_calibration_essay);
        this.submit_button.attr('disabled', true);
        return this.scroll_to_top();
      } else if (response.error) {
        return this.render_error(response.error);
      } else {
        return this.render_error("An error occurred while retrieving the next calibration essay");
      }
    };

    PeerGradingProblem.prototype.tracking_changes = function() {
      return this.grading_wrapper.data('track-changes') === true;
    };

    PeerGradingProblem.prototype.render_submission = function(response) {
      if (response.success) {
        this.submit_button.hide();
        this.submission_container.html("");
        this.render_submission_data(response);
        this.calibration_panel.removeClass('current-state');
        this.grading_panel.addClass('current-state');
        this.calibration_panel.find(this.calibration_text_sel).hide();
        this.grading_panel.find(this.calibration_text_sel).hide();
        this.calibration_panel.find(this.grading_text_sel).show();
        this.grading_panel.find(this.grading_text_sel).show();
        this.flag_student_container.show();
        this.peer_grading_instructions.show();
        if (this.tracking_changes()) {
          this.ice_legend.show();
          this.feedback_area.html(this.make_paragraphs(response.student_response));
          this.change_tracker.rebindTracker();
        } else {
          this.feedback_area.val("");
        }
        this.feedback_area.attr('disabled', false);
        this.flag_student_checkbox.removeAttr("checked");
        this.submit_button.show();
        this.submit_button.unbind('click');
        this.submit_button.click(this.submit_grade);
        this.submit_button.attr('disabled', true);
        return this.scroll_to_top();
      } else if (response.error) {
        return this.render_error(response.error);
      } else {
        return this.render_error("An error occurred when retrieving the next submission.");
      }
    };

    PeerGradingProblem.prototype.make_paragraphs = function(text) {
      var new_text, paragraph, paragraph_split, _i, _len;
      paragraph_split = text.split(/\n\s*\n/);
      new_text = '';
      for (_i = 0, _len = paragraph_split.length; _i < _len; _i++) {
        paragraph = paragraph_split[_i];
        new_text += "<p>" + paragraph + "</p>";
      }
      return new_text;
    };

    PeerGradingProblem.prototype.render_submission_data = function(response) {
      this.content_panel.show();
      this.error_container.hide();
      this.submission_container.append(this.make_paragraphs(response.student_response));
      this.prompt_container.html(response.prompt);
      this.rubric_selection_container.html(response.rubric);
      this.submission_key_input.val(response.submission_key);
      this.essay_id_input.val(response.submission_id);
      this.setup_score_selection(response.max_score);
      this.submit_button.hide();
      this.action_button.hide();
      this.calibration_feedback_panel.hide();
      this.rub = new Rubric(this.el);
      return this.rub.initialize(this.location);
    };

    PeerGradingProblem.prototype.render_calibration_feedback = function(response) {
      var actual_score, calibration_wrapper, score;
      this.calibration_feedback_panel.slideDown();
      calibration_wrapper = this.$(this.calibration_feedback_wrapper_sel);
      calibration_wrapper.html("<p>The score you gave was: " + this.grade + ". The instructor score is: " + response.actual_score + "</p>");
      score = parseInt(this.grade);
      actual_score = parseInt(response.actual_score);
      if (score === actual_score) {
        calibration_wrapper.append("<p>Your score matches the instructor score!</p>");
      } else {
        calibration_wrapper.append("<p>You may want to review the rubric again.</p>");
      }
      if (response.actual_rubric !== void 0) {
        calibration_wrapper.append("<div>Instructor Scored Rubric: " + response.actual_rubric + "</div>");
      }
      if (response.actual_feedback.feedback !== void 0) {
        calibration_wrapper.append("<div>Instructor Feedback: " + response.actual_feedback + "</div>");
      }
      this.$("input[name='score-selection']").attr('disabled', true);
      this.submit_button.hide();
      return this.calibration_feedback_button.show();
    };

    PeerGradingProblem.prototype.render_interstitial_page = function() {
      this.content_panel.hide();
      this.grading_message.hide();
      return this.interstitial_page.show();
    };

    PeerGradingProblem.prototype.render_calibration_interstitial_page = function() {
      this.content_panel.hide();
      this.action_button.hide();
      return this.calibration_interstitial_page.show();
    };

    PeerGradingProblem.prototype.render_error = function(error_message) {
      this.error_container.show();
      this.calibration_feedback_panel.hide();
      this.error_container.html(error_message);
      this.content_panel.hide();
      return this.action_button.show();
    };

    PeerGradingProblem.prototype.show_submit_button = function() {
      this.submit_button.attr('disabled', false);
      return this.submit_button.show();
    };

    PeerGradingProblem.prototype.setup_score_selection = function(max_score) {
      return this.$("input[class='score-selection']").change(this.graded_callback);
    };

    PeerGradingProblem.prototype.gentle_alert = function(msg) {
      this.grading_message.fadeIn();
      return this.grading_message.html("<p>" + msg + "</p>");
    };

    PeerGradingProblem.prototype.collapse_question = function(event) {
      var new_text;
      this.prompt_container.slideToggle();
      this.prompt_container.toggleClass('open');
      if (this.question_header.text() === "Hide Question") {
        new_text = "Show Question";
        Logger.log('oe_hide_question', {
          location: this.location
        });
      } else {
        Logger.log('oe_show_question', {
          location: this.location
        });
        new_text = "Hide Question";
      }
      this.question_header.text(new_text);
      return false;
    };

    PeerGradingProblem.prototype.scroll_to_top = function() {
      return $('html, body').animate({
        scrollTop: $(".peer-grading").offset().top
      }, 200);
    };

    return PeerGradingProblem;

  })();

}).call(this);
