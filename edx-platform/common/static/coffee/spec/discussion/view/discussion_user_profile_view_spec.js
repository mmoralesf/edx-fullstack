// Generated by CoffeeScript 1.6.1
(function() {

  describe("DiscussionUserProfileView", function() {
    var makeView;
    beforeEach(function() {
      DiscussionSpecHelper.setUpGlobals();
      setFixtures("<script type=\"text/template\" id=\"_user_profile\">\n    <section class=\"discussion\">\n        {{#threads}}\n            <article class=\"discussion-thread\" id=\"thread_{{id}}\"/>\n        {{/threads}}\n    </section>\n    <section class=\"pagination\"/>\n</script>\n<script type=\"text/template\" id=\"_profile_thread\">\n    <div class=\"profile-thread\" id=\"thread_{{id}}\"/>\n</script>\n<script type=\"text/template\" id=\"_pagination\">\n    <div class=\"discussion-paginator\">\n        <a href=\"#different-page\"/>\n    </div>\n    <div\n        class=\"pagination-params\"\n        data-leftdots=\"{{leftdots}}\"\n        data-page=\"{{page}}\"\n        data-rightdots=\"{{rightdots}}\"\n    >\n        {{#previous}}\n            <div class=\"previous\" data-url=\"{{url}}\" data-number=\"{{number}}\"/>\n        {{/previous}}\n        {{#first}}\n            <div class=\"first\" data-url=\"{{url}}\" data-number=\"{{number}}\"/>\n        {{/first}}\n        {{#lowPages}}\n            <div class=\"lowPages\" data-url=\"{{url}}\" data-number=\"{{number}}\"/>\n        {{/lowPages}}\n        {{#highPages}}\n            <div class=\"highPages\" data-url=\"{{url}}\" data-number=\"{{number}}\"/>\n        {{/highPages}}\n        {{#last}}\n            <div class=\"last\" data-url=\"{{url}}\" data-number=\"{{number}}\"/>\n        {{/last}}\n        {{#next}}\n            <div class=\"next\" data-url=\"{{url}}\" data-number=\"{{number}}\"/>\n        {{/next}}\n    </div>\n</script>\n<div class=\"user-profile-fixture\"/>");
      return spyOn(DiscussionThreadProfileView.prototype, "render");
    });
    makeView = function(threads, page, numPages) {
      return new DiscussionUserProfileView({
        el: $(".user-profile-fixture"),
        collection: threads,
        page: page,
        numPages: numPages
      });
    };
    describe("thread rendering should be correct", function() {
      var checkRender;
      checkRender = function(numThreads) {
        var threads, view;
        threads = _.map(_.range(numThreads), function(i) {
          return {
            id: i.toString(),
            body: "dummy body"
          };
        });
        view = makeView(threads, 1, 1);
        expect(view.$(".discussion").children().length).toEqual(numThreads);
        return _.each(threads, function(thread) {
          return expect(view.$("#thread_" + thread.id).length).toEqual(1);
        });
      };
      it("with no threads", function() {
        return checkRender(0);
      });
      it("with one thread", function() {
        return checkRender(1);
      });
      return it("with several threads", function() {
        return checkRender(5);
      });
    });
    describe("pagination rendering should be correct", function() {
      var baseUri, checkRender, pageInfo;
      baseUri = URI(window.location);
      pageInfo = function(page) {
        return {
          url: baseUri.clone().addSearch("page", page).toString(),
          number: page
        };
      };
      checkRender = function(params) {
        var paramsQuery, view;
        view = makeView([], params.page, params.numPages);
        paramsQuery = view.$(".pagination-params");
        expect(paramsQuery.length).toEqual(1);
        _.each(["page", "leftdots", "rightdots"], function(param) {
          return expect(paramsQuery.data(param)).toEqual(params[param]);
        });
        _.each(["previous", "first", "last", "next"], function(param) {
          var expected;
          expected = params[param];
          return expect(paramsQuery.find("." + param).data()).toEqual(expected ? pageInfo(expected) : null);
        });
        return _.each(["lowPages", "highPages"], function(param) {
          return expect(paramsQuery.find("." + param).map(function() {
            return $(this).data();
          }).get()).toEqual(_.map(params[param], pageInfo));
        });
      };
      it("for one page", function() {
        return checkRender({
          page: 1,
          numPages: 1,
          previous: null,
          first: null,
          leftdots: false,
          lowPages: [],
          highPages: [],
          rightdots: false,
          last: null,
          next: null
        });
      });
      it("for first page of three (max with no last)", function() {
        return checkRender({
          page: 1,
          numPages: 3,
          previous: null,
          first: null,
          leftdots: false,
          lowPages: [],
          highPages: [2, 3],
          rightdots: false,
          last: null,
          next: 2
        });
      });
      it("for first page of four (has last but no dots)", function() {
        return checkRender({
          page: 1,
          numPages: 4,
          previous: null,
          first: null,
          leftdots: false,
          lowPages: [],
          highPages: [2, 3],
          rightdots: false,
          last: 4,
          next: 2
        });
      });
      it("for first page of five (has dots)", function() {
        return checkRender({
          page: 1,
          numPages: 5,
          previous: null,
          first: null,
          leftdots: false,
          lowPages: [],
          highPages: [2, 3],
          rightdots: true,
          last: 5,
          next: 2
        });
      });
      it("for last page of three (max with no first)", function() {
        return checkRender({
          page: 3,
          numPages: 3,
          previous: 2,
          first: null,
          leftdots: false,
          lowPages: [1, 2],
          highPages: [],
          rightdots: false,
          last: null,
          next: null
        });
      });
      it("for last page of four (has first but no dots)", function() {
        return checkRender({
          page: 4,
          numPages: 4,
          previous: 3,
          first: 1,
          leftdots: false,
          lowPages: [2, 3],
          highPages: [],
          rightdots: false,
          last: null,
          next: null
        });
      });
      it("for last page of five (has dots)", function() {
        return checkRender({
          page: 5,
          numPages: 5,
          previous: 4,
          first: 1,
          leftdots: true,
          lowPages: [3, 4],
          highPages: [],
          rightdots: false,
          last: null,
          next: null
        });
      });
      it("for middle page of five (max with no first/last)", function() {
        return checkRender({
          page: 3,
          numPages: 5,
          previous: 2,
          first: null,
          leftdots: false,
          lowPages: [1, 2],
          highPages: [4, 5],
          rightdots: false,
          last: null,
          next: 4
        });
      });
      it("for middle page of seven (has first/last but no dots)", function() {
        return checkRender({
          page: 4,
          numPages: 7,
          previous: 3,
          first: 1,
          leftdots: false,
          lowPages: [2, 3],
          highPages: [5, 6],
          rightdots: false,
          last: 7,
          next: 5
        });
      });
      return it("for middle page of nine (has dots)", function() {
        return checkRender({
          page: 5,
          numPages: 9,
          previous: 4,
          first: 1,
          leftdots: true,
          lowPages: [3, 4],
          highPages: [6, 7],
          rightdots: true,
          last: 9,
          next: 6
        });
      });
    });
    return describe("pagination interaction", function() {
      beforeEach(function() {
        this.view = makeView([], 1, 1);
        return spyOn($, "ajax");
      });
      it("causes updated rendering", function() {
        var _this = this;
        $.ajax.andCallFake(function(params) {
          params.success({
            discussion_data: [
              {
                id: "on_page_42",
                body: "dummy body"
              }
            ],
            page: 42,
            num_pages: 99
          });
          return {
            always: function() {}
          };
        });
        this.view.$(".pagination a").first().click();
        expect(this.view.$("#thread_on_page_42").length).toEqual(1);
        expect(this.view.$(".pagination-params").data("page")).toEqual(42);
        return expect(this.view.$(".pagination-params .last").data("number")).toEqual(99);
      });
      return it("handles AJAX errors", function() {
        var _this = this;
        spyOn(DiscussionUtil, "discussionAlert");
        $.ajax.andCallFake(function(params) {
          params.error();
          return {
            always: function() {}
          };
        });
        this.view.$(".pagination a").first().click();
        return expect(DiscussionUtil.discussionAlert).toHaveBeenCalled();
      });
    });
  });

}).call(this);
